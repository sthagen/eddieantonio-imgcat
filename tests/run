#!/bin/bash

# Copyright (c) 2017â€“2023  Eddie Antonio Santos <hello@eddieantonio.ca>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -u

################################# Test Cases #################################
imgcat_tests() {
    #           command that should succeed
    assert_ok   imgcat --width=12 img/1px_256.jpg

    #           expected output             command
    assert_eq   out/1px_256.png/256.bin     imgcat -d 256    img/1px_256.png
    assert_eq   out/1px_8.png/8.bin         imgcat -d 8      img/1px_8.png
    assert_eq   out/1px_8.png/8.bin         imgcat -d ansi   img/1px_8.png
    assert_eq   out/1px_256.png/iterm2.bin  imgcat -d iterm2 img/1px_256.png
    assert_eq   out/1px_grey.png/256.bin    imgcat -d 256    img/1px_grey.png

    # Test option aliases
    assert_eq   out/1px_256.png/256.bin         imgcat --256     img/1px_256.png
    assert_eq   out/1px_8.png/8.bin             imgcat --ansi    img/1px_8.png
    assert_eq   out/1px_8.png/8.bin             imgcat --8       img/1px_8.png
    assert_eq   out/1px_256.png/iterm2.bin      imgcat --iterm2  img/1px_256.png

    # Test invocations that should fail
    assert_fail imgcat
    assert_fail imgcat --width=-3 "$ANY_IMAGE"
    assert_fail imgcat -w mank3y "$ANY_IMAGE"
    assert_fail imgcat --height=-3 "$ANY_IMAGE"
    assert_fail imgcat -r mank3y "$ANY_IMAGE"
    assert_fail imgcat --fake-option

    # Test that we can pipe in images and have them render
    assert_eq   out/1px_256.png/256.bin \
        pipe img/1px_256.png "$IMGCAT" --256

    # Test adjusting the width of iTerm2 output
    assert_eq   out/1px_256.png/iterm2.80xN.bin \
        imgcat --iterm2 --width 80 img/1px_256.png

    # Test adjusting height
    assert_eq   out/1x512px_magenta.png/256.1x24.bin \
        imgcat --256 --height 24 img/1x512px_magenta.png
    assert_eq   out/1x512px_magenta.png/iterm2.1x24.bin \
        imgcat --iterm2 --height 24 img/1x512px_magenta.png

    # Test that --no-resize overrides width AND height
    assert_eq   out/1px_8.png/8.bin \
        imgcat -d 8 -R -w 128        img/1px_8.png
    assert_eq   out/1px_8.png/8.bin \
        imgcat -d 8 -R        -r 128 img/1px_8.png
    assert_eq   out/1px_8.png/8.bin \
        imgcat -d 8 -R -w 128 -r 128 img/1px_8.png

    # Test half-height blocks
    assert_eq   out/1px_256.png/256H.bin \
        imgcat -H -d 256 img/1px_256.png

    # Test aspect ratio preservation
    assert_eq out/512x512px_magenta.png/256.16x16.half-height.bin \
        imgcat -w 16 -r 16 -d 256 -H img/512x512px_magenta.png
    assert_eq out/512x512px_magenta.png/256.8x8.half-height.bin \
        imgcat -w 16 -r 8 -d 256 -H img/512x512px_magenta.png
    assert_eq out/512x512px_magenta.png/256.8x8.half-height.bin \
        imgcat -w 8 -r 16 -d 256 -H img/512x512px_magenta.png

    # Test --no-preserve-aspect-ratio
    assert_eq out/512x512px_magenta.png/256.16x8.half-height.bin \
        imgcat -P -w 16 -r 8 -d 256 -H img/512x512px_magenta.png
    assert_eq out/512x512px_magenta.png/256.8x16.half-height.bin \
        imgcat -P -w 8 -r 16 -d 256 -H img/512x512px_magenta.png

    ### Internal sturf below: ###

    # Test --x-terminal-override
    assert_ok   imgcat --x-terminal-override=80x24:256 "$ANY_IMAGE"
    assert_eq   out/1px_256.png/256.bin \
        imgcat --x-terminal-override=80x24:256 img/1px_256.png
    # Test regression 19  <https://github.com/eddieantonio/imgcat/issues/19>
    # This should resize the 512x512 image to 80 rows and 80 columns.
    assert_eq   out/512x512px_magenta.png/256.80xN.bin \
        imgcat --x-terminal-override=80x24:256 img/512x512px_magenta.png
}


############################### Test Framework ###############################

# Parallel arrays of invocations (the command line), and its output.
declare -a INVOCATIONS
declare -a OUTPUT
declare -a STDERR

# Array of indices to invocations, output, stderr.
declare -a FAILURES=()

ORIGINAL_DIR="$(pwd)"
SCRIPT_DIR="$(dirname "$0")"

# Get the absolute path to the given binary
IMGCAT="$(cd "$(dirname -- "$1")" >/dev/null && pwd -P)/$(basename -- "$1")"
ANY_IMAGE=img/1px_256.png

ANSI_RED="$(tput setaf 1)"
ANSI_GRN="$(tput setaf 2)"
ANSI_RST="$(tput sgr0)"

assert_ok() {
    _assert "$@" || _add_failure
    return 0
}

assert_fail() {
    _assert "$@" && _add_failure
    return 0
}

assert_eq() {
    local expected="$1"; shift;
    _assert "$@" || {
        _add_failure
        return 0
    }

    local -i last
    last=$(( ${#OUTPUT[@]} - 1))
    diff "$expected" - <<<"${OUTPUT[$last]}" >/dev/null || _add_failure
    return 0
}

_assert() {
    local output stderr bin
    local -i status
    bin="${1/imgcat/$IMGCAT}"
    shift
    output="$(mktemp)"
    stderr="$(mktemp)"

    # Run the command
    "$bin" "$@" >"$output" 2>"$stderr"
    status=$?
    INVOCATIONS+=("$bin $*")
    OUTPUT+=("$(cat "$output")")
    STDERR+=("$(cat "$stderr")")

    unlink "$output"
    unlink "$stderr"

    return $status
}

_add_failure() {
    local -i items="${#INVOCATIONS[@]}"
    FAILURES+=("$((items - 1))")
}

# Can't specify command line redirection in assert commands,
# but this will do it:
pipe() {
    local filename="$1"; shift;
    <"$filename" "$@"
}


print_success() {
    echo "${ANSI_GRN}$ncases tests passed${ANSI_RST}"
}

print_failures() {
    for index in "${FAILURES[@]}"; do
        echo "Failed: ${INVOCATIONS[$index]}"
        echo "=== stderr ==="
        echo "${STDERR[$index]}"
        echo "=== output ==="
        echo "${OUTPUT[$index]}"
    done

    echo "${ANSI_RED}$nfailures/$ncases tests failed${ANSI_RST}"
}

# Run the tests in test-cases
cd "$SCRIPT_DIR" && imgcat_tests && cd "$ORIGINAL_DIR" || exit

declare -i nfailures="${#FAILURES[@]}"
declare -i ncases="${#INVOCATIONS[@]}"
if ((nfailures > 0)); then
    print_failures
    exit 1
else
    print_success
fi
